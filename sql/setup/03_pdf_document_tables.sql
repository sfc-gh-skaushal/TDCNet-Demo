-- TDC Net Snowflake Demo - PDF Document Tables Setup
-- Creates tables for PDF-based SOP documents with chunking support

USE DATABASE TELCO_DEMO;
USE SCHEMA NETWORK_OPS;
USE WAREHOUSE SID_WH;

-- Create stage for PDF documents
CREATE OR REPLACE STAGE SOP_PDF_STAGE
    DIRECTORY = (ENABLE = TRUE)
    COMMENT = 'Stage for PDF SOP documents with directory table support';

-- Directory table to track PDF files in the stage
CREATE OR REPLACE TABLE SOP_DIRECTORY (
    RELATIVE_PATH VARCHAR(500) PRIMARY KEY,
    FILE_URL VARCHAR(1000),
    SIZE INTEGER,
    LAST_MODIFIED TIMESTAMP_NTZ,
    ETAG VARCHAR(100),
    MD5 VARCHAR(32),
    FILE_TYPE VARCHAR(10) DEFAULT 'PDF',
    DOCUMENT_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Directory table tracking PDF files in SOP_PDF_STAGE';

-- Document metadata table
CREATE OR REPLACE TABLE SOP_DOCUMENT_METADATA (
    DOCUMENT_ID VARCHAR(50) PRIMARY KEY,
    RELATIVE_PATH VARCHAR(500),
    TITLE VARCHAR(500),
    CATEGORY VARCHAR(100),
    EQUIPMENT_TYPES ARRAY,
    FAULT_CODES ARRAY,
    DOCUMENT_VERSION VARCHAR(20) DEFAULT '1.0',
    AUTHOR VARCHAR(100),
    CREATION_DATE DATE,
    LAST_REVIEWED DATE,
    REVIEW_STATUS VARCHAR(20) DEFAULT 'CURRENT',
    TAGS ARRAY,
    LANGUAGE VARCHAR(10) DEFAULT 'EN',
    PAGE_COUNT INTEGER,
    FILE_SIZE_BYTES INTEGER,
    CHECKSUM VARCHAR(64),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Foreign key relationship
    FOREIGN KEY (RELATIVE_PATH) REFERENCES SOP_DIRECTORY(RELATIVE_PATH)
) COMMENT = 'Metadata for PDF SOP documents';

-- Document chunks table for Cortex Search
CREATE OR REPLACE TABLE SOP_DOCUMENT_CHUNKS (
    CHUNK_ID VARCHAR(100) PRIMARY KEY,
    DOCUMENT_ID VARCHAR(50),
    RELATIVE_PATH VARCHAR(500),
    CHUNK_SEQUENCE INTEGER,
    PAGE_NUMBER INTEGER,
    CHUNK_TEXT TEXT,
    CHUNK_TITLE VARCHAR(500),
    CHUNK_TYPE VARCHAR(50), -- 'HEADER', 'PROCEDURE', 'SAFETY', 'DIAGNOSTIC', 'VERIFICATION'
    SECTION_NAME VARCHAR(200),
    WORD_COUNT INTEGER,
    CHARACTER_COUNT INTEGER,
    EXTRACTION_METHOD VARCHAR(50) DEFAULT 'DOCUMENT_AI',
    EXTRACTION_CONFIDENCE FLOAT,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Foreign key relationships
    FOREIGN KEY (DOCUMENT_ID) REFERENCES SOP_DOCUMENT_METADATA(DOCUMENT_ID),
    FOREIGN KEY (RELATIVE_PATH) REFERENCES SOP_DIRECTORY(RELATIVE_PATH)
) COMMENT = 'Text chunks extracted from PDF documents for search indexing';

-- Enable change tracking on chunks table (required for Cortex Search)
ALTER TABLE SOP_DOCUMENT_CHUNKS SET CHANGE_TRACKING = TRUE;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS IDX_CHUNKS_DOCUMENT_ID ON SOP_DOCUMENT_CHUNKS(DOCUMENT_ID);
CREATE INDEX IF NOT EXISTS IDX_CHUNKS_CHUNK_TYPE ON SOP_DOCUMENT_CHUNKS(CHUNK_TYPE);
CREATE INDEX IF NOT EXISTS IDX_CHUNKS_PAGE_NUMBER ON SOP_DOCUMENT_CHUNKS(PAGE_NUMBER);
CREATE INDEX IF NOT EXISTS IDX_METADATA_CATEGORY ON SOP_DOCUMENT_METADATA(CATEGORY);
CREATE INDEX IF NOT EXISTS IDX_METADATA_ACTIVE ON SOP_DOCUMENT_METADATA(IS_ACTIVE);

-- Create view for searchable content
CREATE OR REPLACE VIEW VW_SEARCHABLE_SOP_CONTENT AS
SELECT 
    c.CHUNK_ID,
    c.DOCUMENT_ID,
    m.TITLE AS DOCUMENT_TITLE,
    m.CATEGORY,
    m.EQUIPMENT_TYPES,
    m.FAULT_CODES,
    c.CHUNK_SEQUENCE,
    c.PAGE_NUMBER,
    c.CHUNK_TEXT,
    c.CHUNK_TITLE,
    c.CHUNK_TYPE,
    c.SECTION_NAME,
    c.WORD_COUNT,
    c.EXTRACTION_CONFIDENCE,
    m.DOCUMENT_VERSION,
    m.LAST_REVIEWED,
    m.TAGS,
    d.FILE_URL,
    d.LAST_MODIFIED AS FILE_LAST_MODIFIED
FROM SOP_DOCUMENT_CHUNKS c
JOIN SOP_DOCUMENT_METADATA m ON c.DOCUMENT_ID = m.DOCUMENT_ID
JOIN SOP_DIRECTORY d ON c.RELATIVE_PATH = d.RELATIVE_PATH
WHERE m.IS_ACTIVE = TRUE 
  AND d.DOCUMENT_STATUS = 'ACTIVE'
  AND c.EXTRACTION_CONFIDENCE > 0.7;

-- Create aggregated document view for full-text search
CREATE OR REPLACE VIEW VW_FULL_DOCUMENT_CONTENT AS
SELECT 
    m.DOCUMENT_ID,
    m.TITLE,
    m.CATEGORY,
    m.EQUIPMENT_TYPES,
    m.FAULT_CODES,
    m.TAGS,
    LISTAGG(c.CHUNK_TEXT, '\n\n') WITHIN GROUP (ORDER BY c.CHUNK_SEQUENCE) AS FULL_TEXT,
    COUNT(c.CHUNK_ID) AS TOTAL_CHUNKS,
    AVG(c.EXTRACTION_CONFIDENCE) AS AVG_CONFIDENCE,
    MAX(c.PAGE_NUMBER) AS TOTAL_PAGES,
    SUM(c.WORD_COUNT) AS TOTAL_WORDS,
    d.FILE_URL,
    d.RELATIVE_PATH
FROM SOP_DOCUMENT_METADATA m
JOIN SOP_DOCUMENT_CHUNKS c ON m.DOCUMENT_ID = c.DOCUMENT_ID
JOIN SOP_DIRECTORY d ON m.RELATIVE_PATH = d.RELATIVE_PATH
WHERE m.IS_ACTIVE = TRUE 
  AND d.DOCUMENT_STATUS = 'ACTIVE'
GROUP BY m.DOCUMENT_ID, m.TITLE, m.CATEGORY, m.EQUIPMENT_TYPES, 
         m.FAULT_CODES, m.TAGS, d.FILE_URL, d.RELATIVE_PATH;

-- Create procedure to refresh directory table from stage
CREATE OR REPLACE PROCEDURE REFRESH_SOP_DIRECTORY()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    -- Refresh directory table with current stage contents
    MERGE INTO SOP_DIRECTORY AS target
    USING (
        SELECT 
            RELATIVE_PATH,
            FILE_URL,
            SIZE,
            LAST_MODIFIED,
            ETAG,
            MD5
        FROM DIRECTORY(@SOP_PDF_STAGE)
        WHERE RELATIVE_PATH LIKE '%.pdf'
    ) AS source
    ON target.RELATIVE_PATH = source.RELATIVE_PATH
    WHEN MATCHED THEN
        UPDATE SET
            FILE_URL = source.FILE_URL,
            SIZE = source.SIZE,
            LAST_MODIFIED = source.LAST_MODIFIED,
            ETAG = source.ETAG,
            MD5 = source.MD5,
            UPDATED_TIMESTAMP = CURRENT_TIMESTAMP()::TIMESTAMP_NTZ
    WHEN NOT MATCHED THEN
        INSERT (RELATIVE_PATH, FILE_URL, SIZE, LAST_MODIFIED, ETAG, MD5)
        VALUES (source.RELATIVE_PATH, source.FILE_URL, source.SIZE, 
                source.LAST_MODIFIED, source.ETAG, source.MD5);
    
    RETURN 'Directory table refreshed successfully';
END;
$$;

-- Create procedure to extract text from PDFs using Document AI
CREATE OR REPLACE PROCEDURE EXTRACT_PDF_CONTENT(DOCUMENT_PATH VARCHAR)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
    doc_id VARCHAR;
    chunk_counter INTEGER DEFAULT 1;
    extraction_result VARIANT;
BEGIN
    -- Extract document ID from path
    doc_id := REGEXP_SUBSTR(DOCUMENT_PATH, 'SOP-[0-9]+');
    
    -- Note: In a real implementation, this would use Snowflake's Document AI
    -- For demo purposes, we'll simulate the extraction process
    
    -- This is a placeholder for Document AI integration
    -- Real implementation would use:
    -- SELECT SNOWFLAKE.DOCUMENT_AI.EXTRACT_TEXT(@SOP_PDF_STAGE || '/' || DOCUMENT_PATH)
    
    RETURN 'PDF content extraction completed for ' || doc_id;
END;
$$;

-- Create function to search document chunks
CREATE OR REPLACE FUNCTION SEARCH_DOCUMENT_CHUNKS(
    SEARCH_QUERY VARCHAR,
    CHUNK_TYPE VARCHAR DEFAULT NULL,
    CATEGORY_FILTER VARCHAR DEFAULT NULL,
    LIMIT_RESULTS INTEGER DEFAULT 10
)
RETURNS TABLE (
    CHUNK_ID VARCHAR,
    DOCUMENT_ID VARCHAR,
    DOCUMENT_TITLE VARCHAR,
    CHUNK_TEXT VARCHAR,
    CHUNK_TYPE VARCHAR,
    PAGE_NUMBER INTEGER,
    RELEVANCE_SCORE FLOAT
)
LANGUAGE SQL
AS
$$
    SELECT 
        CHUNK_ID,
        DOCUMENT_ID,
        DOCUMENT_TITLE,
        CHUNK_TEXT,
        CHUNK_TYPE,
        PAGE_NUMBER,
        -- Simple relevance scoring (to be replaced with Cortex Search)
        CASE 
            WHEN UPPER(CHUNK_TEXT) LIKE UPPER('%' || SEARCH_QUERY || '%') THEN 0.9
            WHEN UPPER(CHUNK_TITLE) LIKE UPPER('%' || SEARCH_QUERY || '%') THEN 0.8
            WHEN UPPER(SECTION_NAME) LIKE UPPER('%' || SEARCH_QUERY || '%') THEN 0.7
            ELSE 0.1
        END AS RELEVANCE_SCORE
    FROM VW_SEARCHABLE_SOP_CONTENT
    WHERE (UPPER(CHUNK_TEXT) LIKE UPPER('%' || SEARCH_QUERY || '%')
           OR UPPER(CHUNK_TITLE) LIKE UPPER('%' || SEARCH_QUERY || '%')
           OR UPPER(SECTION_NAME) LIKE UPPER('%' || SEARCH_QUERY || '%'))
      AND (CHUNK_TYPE = CHUNK_TYPE OR CHUNK_TYPE IS NULL)
      AND (CATEGORY = CATEGORY_FILTER OR CATEGORY_FILTER IS NULL)
    ORDER BY RELEVANCE_SCORE DESC
    LIMIT LIMIT_RESULTS
$$;

-- Display table creation summary
SELECT 'PDF-based SOP document tables created successfully!' AS STATUS;

-- Show created objects
SHOW TABLES LIKE 'SOP_%';
SHOW STAGES LIKE 'SOP_%';
SHOW PROCEDURES LIKE '%SOP%';
