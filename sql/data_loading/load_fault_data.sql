-- TDC Net Snowflake Demo - Load Fault Data
-- Loads network fault logs from CSV file into Snowflake

USE DATABASE TELCO_DEMO;
USE SCHEMA NETWORK_OPS;
USE WAREHOUSE SID_WH;

-- First, put the CSV file into the stage
-- This would typically be done via SnowSQL or Snowflake web interface
-- PUT file:///path/to/network_faults.csv @FAULT_DATA_STAGE;

-- For demo purposes, we'll create a script that can load from a local file
-- In a real implementation, you would use Snowpipe for automated loading

-- Load data from stage into table
COPY INTO NETWORK_FAULTS (
    FAULT_ID,
    FAULT_TIMESTAMP,
    FAULT_CODE,
    FAULT_DESCRIPTION,
    FAULT_CATEGORY,
    NETWORK_TYPE,
    EQUIPMENT_TYPE,
    LOCATION,
    SEVERITY,
    CUSTOMER_IMPACT,
    CUSTOMERS_AFFECTED,
    SERVICE_CALLS_GENERATED,
    RESOLUTION_TIMESTAMP,
    RESOLUTION_TIME_HOURS,
    FIRST_TIME_FIX,
    TECHNICIAN_TYPE_REQUIRED,
    ESTIMATED_REVENUE_IMPACT,
    PRIORITY_SCORE
)
FROM @FAULT_DATA_STAGE/network_faults.csv
FILE_FORMAT = CSV_FORMAT
ON_ERROR = 'CONTINUE'
PURGE = FALSE;

-- Verify data load
SELECT COUNT(*) AS TOTAL_RECORDS_LOADED FROM NETWORK_FAULTS;

-- Show sample data
SELECT * FROM NETWORK_FAULTS LIMIT 10;

-- Create training data for Cortex Analyst
-- Extract features for fault classification model
INSERT INTO FAULT_CLASSIFICATION_TRAINING (FAULT_ID, FEATURES, LABEL)
SELECT 
    FAULT_ID,
    OBJECT_CONSTRUCT(
        'network_type', NETWORK_TYPE,
        'equipment_type', EQUIPMENT_TYPE,
        'location', LOCATION,
        'fault_code', FAULT_CODE,
        'customers_affected', CUSTOMERS_AFFECTED,
        'service_calls_generated', SERVICE_CALLS_GENERATED,
        'hour_of_day', HOUR(FAULT_TIMESTAMP),
        'day_of_week', DAYOFWEEK(FAULT_TIMESTAMP),
        'business_hours', (HOUR(FAULT_TIMESTAMP) BETWEEN 8 AND 17 
                          AND DAYOFWEEK(FAULT_TIMESTAMP) BETWEEN 2 AND 6)
    ) AS FEATURES,
    FAULT_CATEGORY AS LABEL
FROM NETWORK_FAULTS
WHERE FAULT_CATEGORY IS NOT NULL;

-- Generate technician performance metrics
INSERT INTO TECHNICIAN_METRICS (
    METRIC_ID,
    TECHNICIAN_TYPE,
    LOCATION,
    FAULT_CATEGORY,
    TOTAL_JOBS,
    FIRST_TIME_FIX_COUNT,
    FIRST_TIME_FIX_RATE,
    AVG_RESOLUTION_TIME_HOURS,
    PERIOD_START,
    PERIOD_END
)
SELECT 
    TECHNICIAN_TYPE_REQUIRED || '_' || LOCATION || '_' || FAULT_CATEGORY || '_' || TO_CHAR(CURRENT_DATE(), 'YYYYMM') AS METRIC_ID,
    TECHNICIAN_TYPE_REQUIRED AS TECHNICIAN_TYPE,
    LOCATION,
    FAULT_CATEGORY,
    COUNT(*) AS TOTAL_JOBS,
    SUM(CASE WHEN FIRST_TIME_FIX THEN 1 ELSE 0 END) AS FIRST_TIME_FIX_COUNT,
    AVG(CASE WHEN FIRST_TIME_FIX THEN 1.0 ELSE 0.0 END) AS FIRST_TIME_FIX_RATE,
    AVG(RESOLUTION_TIME_HOURS) AS AVG_RESOLUTION_TIME_HOURS,
    DATE_TRUNC('month', MIN(FAULT_TIMESTAMP)) AS PERIOD_START,
    DATE_TRUNC('month', MAX(FAULT_TIMESTAMP)) AS PERIOD_END
FROM VW_NETWORK_FAULTS_ENHANCED
WHERE IS_RESOLVED = TRUE
GROUP BY TECHNICIAN_TYPE_REQUIRED, LOCATION, FAULT_CATEGORY;

-- Generate equipment reliability data
INSERT INTO EQUIPMENT_RELIABILITY (
    EQUIPMENT_ID,
    EQUIPMENT_TYPE,
    LOCATION,
    NETWORK_TYPE,
    INSTALLATION_DATE,
    LAST_MAINTENANCE_DATE,
    FAULT_COUNT_30_DAYS,
    FAULT_COUNT_90_DAYS,
    PREDICTED_FAILURE_RISK,
    MAINTENANCE_PRIORITY
)
SELECT 
    EQUIPMENT_TYPE || '_' || LOCATION || '_' || ROW_NUMBER() OVER (PARTITION BY EQUIPMENT_TYPE, LOCATION ORDER BY COUNT(*) DESC) AS EQUIPMENT_ID,
    EQUIPMENT_TYPE,
    LOCATION,
    NETWORK_TYPE,
    DATEADD('day', -UNIFORM(365, 1095, RANDOM()), CURRENT_DATE()) AS INSTALLATION_DATE, -- Random install date 1-3 years ago
    DATEADD('day', -UNIFORM(30, 180, RANDOM()), CURRENT_DATE()) AS LAST_MAINTENANCE_DATE, -- Random maintenance 1-6 months ago
    COUNT(CASE WHEN FAULT_TIMESTAMP >= DATEADD('day', -30, CURRENT_DATE()) THEN 1 END) AS FAULT_COUNT_30_DAYS,
    COUNT(CASE WHEN FAULT_TIMESTAMP >= DATEADD('day', -90, CURRENT_DATE()) THEN 1 END) AS FAULT_COUNT_90_DAYS,
    CASE 
        WHEN COUNT(*) > 10 THEN UNIFORM(0.7, 1.0, RANDOM())
        WHEN COUNT(*) > 5 THEN UNIFORM(0.3, 0.7, RANDOM())
        ELSE UNIFORM(0.0, 0.3, RANDOM())
    END AS PREDICTED_FAILURE_RISK,
    CASE 
        WHEN COUNT(*) > 10 THEN 'High'
        WHEN COUNT(*) > 5 THEN 'Medium'
        ELSE 'Low'
    END AS MAINTENANCE_PRIORITY
FROM VW_NETWORK_FAULTS_ENHANCED
GROUP BY EQUIPMENT_TYPE, LOCATION, NETWORK_TYPE;

-- Display load completion summary
SELECT 
    'Network Faults' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT
FROM NETWORK_FAULTS
UNION ALL
SELECT 
    'Training Data' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT
FROM FAULT_CLASSIFICATION_TRAINING
UNION ALL
SELECT 
    'Technician Metrics' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT
FROM TECHNICIAN_METRICS
UNION ALL
SELECT 
    'Equipment Reliability' AS TABLE_NAME,
    COUNT(*) AS RECORD_COUNT
FROM EQUIPMENT_RELIABILITY;

-- Show data quality summary
SELECT 
    FAULT_CATEGORY,
    COUNT(*) AS FAULT_COUNT,
    AVG(FIRST_TIME_FIX::INT) AS AVG_FTF_RATE,
    AVG(RESOLUTION_TIME_HOURS) AS AVG_RESOLUTION_TIME,
    AVG(CUSTOMERS_AFFECTED) AS AVG_CUSTOMERS_AFFECTED
FROM VW_NETWORK_FAULTS_ENHANCED
GROUP BY FAULT_CATEGORY
ORDER BY FAULT_COUNT DESC;
